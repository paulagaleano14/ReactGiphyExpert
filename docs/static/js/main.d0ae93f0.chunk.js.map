{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks.js/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategoria","useState","input","setInput","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respo","json","data","gifs","map","img","images","title","downsized_medium","id","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categorias","item","ReactDOM","render","document","getElementById"],"mappings":"yLAGaA,EAAc,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,aAE3B,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OACI,uBAAMC,SATU,SAACC,GACjBA,EAAEC,iBACCJ,EAAMK,OAAOC,OAAS,IACrBR,GAAa,SAAAS,GAAI,OAAKP,GAAL,mBAAeO,OAChCN,EAAS,MAKb,UACI,8CACA,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBQ,SAACP,GACjBF,EAASE,EAAEQ,OAAOF,c,+BCPbG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,gDAEmCC,UAAUH,GAF7C,+DAGCI,MAAMF,GAHP,cAGbG,EAHa,gBAIEA,EAAMC,OAJR,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAQ,CACJA,IAAKA,EAAIC,OACTC,MAAOF,EAAIE,MACXV,IAAG,UAAGQ,EAAIC,cAAP,aAAG,EAAYE,iBAAiBX,IACnCY,GAAKJ,EAAII,OAXE,kBAeZN,GAfY,4CAAH,sDCCPO,EAAc,SAAC,GAAsB,IAAnBb,EAAkB,EAAlBA,IAAKU,EAAa,EAAbA,MAEhC,OACI,sBAAKI,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCHJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECHwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAU,IAFd,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAU,SAGxB,CAAEpB,IAGGqB,EDfwBK,CAAc1B,GAAjCW,EAAZ,EAAOJ,KAAaa,EAApB,EAAoBA,QAEpB,OACI,qCACA,mCAAOpB,EAAP,OACCoB,GAAW,mBAAGJ,UAAU,wCAAb,yBACZ,qBAAKA,UAAU,YAAf,SAEQL,EAAOF,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAESA,GADCA,EAAII,aEZrBa,EAAe,WAExB,MAAmCzC,mBAAS,CAAC,SAA7C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,aAAiBA,IAC9B,uBAEA,6BACM2C,EAAWnB,KAAK,SAACoB,EAAMf,GAAP,OACd,cAAC,EAAD,CAEId,SAAW6B,GADLA,Y,MCZ9BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d0ae93f0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategoria } ) => {\r\n\r\n    const [input, setInput] = useState('');\r\n\r\n    const inputChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const inputSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(input.trim().length > 2 ){\r\n            setCategoria(cats => [input, ...cats]);\r\n            setInput(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ inputSubmit }>\r\n            <h2>Add Category</h2>\r\n            <input \r\n                type=\"text\"\r\n                value={ input }\r\n                onChange= { inputChange }  \r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategoria : PropTypes.func.isRequired\r\n}\r\n\r\n","\r\nexport const getGifs = async( category ) => {\r\n        \r\n    const url = `http://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&api_key=viHbE0cZKPgBNHdaj8eYiR7v2deOucZi&limit=10`;\r\n    const respo = await fetch(url);\r\n    const {data} = await respo.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return ({\r\n            img: img.images,\r\n            title: img.title,\r\n            url : img.images?.downsized_medium.url,\r\n            id : img.id\r\n\r\n        })\r\n    })\r\n    return(gifs);\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { url, title } ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks.js/useFetchGifs';\r\nimport { GifGridItem } from '../Components/GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images, loading} = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n        <h3> { category } </h3>\r\n        {loading && <p className=\"card animate__animated animate__flash\" >Cargando...</p>}\r\n        <div className=\"card-grid\">\r\n            { \r\n                images.map(img => (\r\n                    <GifGridItem\r\n                        key={ img.id }  \r\n                        { ...img } \r\n                    />\r\n                ) )\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading : true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading : false\r\n                })\r\n            });\r\n    },[ category ])\r\n    \r\n    \r\n    return state;\r\n}","import { useState } from \"react\";\r\nimport { AddCategory } from \"./Components/AddCategory\";\r\nimport { GifGrid } from \"./Components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categorias, setCategoria] = useState(['Rock']);\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategoria = { setCategoria }/>\r\n            <hr />\r\n\r\n            <ol>\r\n                { categorias.map( (item, id) => \r\n                    <GifGrid \r\n                        key={ item}  \r\n                        category={ item } \r\n                    />\r\n                ) }\r\n            </ol>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}